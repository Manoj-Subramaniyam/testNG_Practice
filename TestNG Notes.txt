TestNG- in Java file

@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod
@Test
@AfterMethod
@AfterClass
@AfterTest
@AfterSuite

----------------------------
in XML

Right click on the selected Classes --> convert to TestNG
<suite name="">
<test thread-count="2" parallel="classes">
<classes>
<class name="packagename.class">
</classes>

</test>
</suite>
--------------------------------
attributes

@Test Attributes

@Test(invocationCount=2) --> default value is 1
	Execute the Test two times, difference between the for loop and invocationCount is for loop will not execute second time when the first loop fails but invocationCount will execute the second time

@Test(timeOut=7000) 
	Maximum allowed time to Execute the one testcase
	Exception--> ThreadTimeoutException
@Test(invocationTimeOut=14000)
	Total allowed time to complete the Testcases

@Test(priority=1) -->Default value is 0
	if the priority is negative then that will execute first
	can be accesed within the class
@Test(dependsOnMethods="packagename.className.MethodName")
	if the first method excutes then it will get Executed
	will skip if the previous method is failed
	can be accessed across the classes
@Test(dependsOnMethods="packagename.className.MethodName", alwaysRun=true) alwaysRun --> default value is false
	If you wnt to run a method eventhought the other methods fails then we can used alwaysRun
	if you run multiple classes in in TestNG xml in that 1 class is dependes on other class and then remaining two are independent then no dependent cases will execute first, it will not follow the declared order in cxml
	E.g: class1(dependsONMethods class2), classs2,class3, class4 then class2 and 3 will execute first then class 4 and class1 will execute
@Test(enabled=true) -> default value is true
	It will execute the Testcase if false means it will not execute
	difference between alwaysRun and enabled is enabled will given top priority but
		 if you have enabled=true and dependsOnMethods in same method and the first method is failed then the second method will not execute,
		 if enabled=true, alwaysRun=true,dependsOnMethods then it will execute the second method
		if enabled=false, alwaysRun=true,dependsOnMethods then it will not execute the second method
@ignore
@Test -->  this will ignore particular method , this can be initialixed on class level
	Difference betwwen enabled=true and @ignore is enabled is declared on method level but @ignore can be declared on class level

@Test(invocationCount=2 , threadpoolSize=2)
	This will execute a @Test method parallely
	Difference between thread-count and threadPoolSize. thread- count s applicable for particular Test, whereas threadPoolsize will be used only on invocationcount

@Test(groups="regression")
@BeforeMethod(groups={"regression","sanity"})
@AfterMethod(groups="regression")
	groups is used run specific testcase with the help of xml
   xml format
	<groups>
	<run>
	<include name="Regression"></include>
	</run>
	</groups>
<groups>
	<run>
	<exclude name="Regression"></exclude>
	</run>
	</groups>
if you want to run both sanity and smoke 
	<groups>
	<run>
	<include name="s.*"></include>
	</run>
	</groups>
if you want to run the smoke first before sanity, then we need to use dependsOnGroups
	E.g: @Test(groups="sanity", dependsOnGroups="smoke")
in XML: verbose= 10 --> default value is 2

<suite name="Test" verbose= "10">

	Verbose is used to get more logs if it is 1 then less logs and if it is 10 then more logs


Parameterization:

Static parameter
Dynamic parameter

static parameter:
	Used to pass the value from XML
	<suite name="">
	<parameter name="" value=""></Parameter>
	<parameter name="" value=""></Parameter>
	<test>
	in java file
		@Parameters({"name1","name2"})
		@Test
		methodname(String url,String id)
		{}
Dynamic parameter(Data Provider):
	@DataProvider(name="testdata")
	public Object[][] testData()
	{
		String[][] data = new String[2][3];
		data[0][1]="row11";
		data[0][2]="row12";
		data[0][3]="row13";
		data[1][1]="row21";
		data[1][2]="row22";
		data[1][3]="row23";
		return data;
	}	